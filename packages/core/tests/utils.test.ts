import { describe, expect, it, vi } from "vitest";

vi.stubGlobal("self", globalThis);

// Generated by CodiumAI

describe("extract_case_id", async () => {
	const { extract_case_id } = await import("../src");
	// Tests that the function returns the case ID when given an email address with a valid format.
	it("should return the case ID when given an email address with a valid format", () => {
		const address = "example+352bcae4-759e-440d-b29c-8e3c7709f5f6@example.com";
		const result = extract_case_id(address);
		expect(result).toBe("352bcae4-759e-440d-b29c-8e3c7709f5f6");
	});

	// Tests that the function returns undefined when given an email address without a plus sign.
	it("should return undefined when given an email address without a plus sign", () => {
		const address = "example@example.com";
		const result = extract_case_id(address);
		expect(result).toBeUndefined();
	});

	// Tests that the function returns undefined when given an empty string.
	it("should return undefined when given an empty string", () => {
		const address = "";
		const result = extract_case_id(address);
		expect(result).toBeUndefined();
	});

	// Tests that the function returns undefined when given an email address with a plus sign but without any characters after it.
	it("should return undefined when given an email address with a plus sign but without any characters after it", () => {
		const address = "example+@example.com";
		const result = extract_case_id(address);
		expect(result).toBeUndefined();
	});

	// Tests that the function returns undefined when given an email address with a plus sign and non-alphanumeric characters after it.
	it("should return undefined when given an email address with a plus sign and non-alphanumeric characters after it", () => {
		const address = "example+!@example.com";
		const result = extract_case_id(address);
		expect(result).toBeUndefined();
	});
});
